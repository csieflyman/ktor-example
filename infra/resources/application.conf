ktor {
    # see io.ktor.server.engine.CommandLine.kt
    # set Dispatchers.IO max threads by system property "kotlinx.coroutines.io.parallelism" (default: 64)
    deployment {
        port = ${?PORT}
        # [Common Engine Configuration]
        # Size of the event group for accepting connections
        # connectionGroupSize = parallelism / 2 + 1
        # Size of the event group for processing connections,
        # parsing messages and doing engine's internal work
        # workerGroupSize = parallelism / 2 + 1
        # Size of the event group for running application code
        # callGroupSize = parallelism

        # [Netty Configuration] => see io.ktor.server.netty.NettyApplicationEngine
        # Size of the queue to store [ApplicationCall] instances that cannot be immediately processed
        # requestQueueLimit = 16
        # Do not create separate call event group and reuse worker group for processing calls
        # shareWorkGroup = false
        # Timeout in seconds for sending responses to client
        # responseWriteTimeoutSeconds = 10
    }

    application {
        modules = [
            fanpoll.infra.ApplicationKt.main,
            fanpoll.ops.OpsProjectKt.opsMain,
            fanpoll.club.ClubProjectKt.clubMain
        ]
    }
}

app {
    info {
        project = "fanpoll"
        buildTime = "@buildTime@"
        git {
            semVer = "@gitSemVer@"
            branch = "@gitBranch@"
            commitId = "@gitCommitId@"
            abbrevCommitId = "@gitAbbrevCommitId@"
            tag = "@gitTag@"
            tagName = "@gitTagName@"
        }
    }
    server {
        env = "@env@" # dev, test, prod
        instanceId = 1
        shutDownUrl = "/ops/server/shutdown/"${?SERVER_SHUTDOWN_KEY}
    }
    infra {
        logging {
            request {
                enabled = true
                destination = "Loki" # File(default), Database, Loki
                includeHeaders = false
                includeQueryString = false
                includeResponseBody = false
                includeGetMethod = false
                excludePaths = ["/ops/sysstat/healthCheck"]
                excludeRequestBodyPaths = ["/login", "/myPassword"]

                loki {
                    username = ${?LOKI_USERNAME}
                    password = ${?LOKI_PASSWORD}
                    pushUrl = "https://logs-prod3.grafana.net/loki/api/v1/push"
                    cio {
                        threadsCount = 1
                    }
                }
            }
            error {
                enabled = true
                destination = "Sentry" # File(default), Database, Sentry

                sentry {
                    dsn = ${?SENTRY_DSN}
                    debug = true
                }
            }
            asyncExecutor {
                coroutineActor {
                    coroutines = 1
                    dispatcher {
                        fixedPoolSize = 1
                    }
                }
            }
        }
        database {
            hikari {
                driverClassName = "org.postgresql.Driver"
                jdbcUrl = ${?DB_URL} #"jdbc:postgresql://localhost:5432/fanpoll"
                username = ${?DB_USER}
                password = ${?DB_PASSWORD}
                minimumIdle = 10
                maximumPoolSize = 20
                idleTimeout = 600000
                connectionTimeout = 10000
            }
            flyway {
                baselineOnMigrate = true
                validateOnMigrate = true
            }
            asyncExecutor {
                coroutineActor {
                    coroutines = 1
                    dispatcher {
                        fixedPoolSize = 1
                    }
                }
            }
            jasync {
                jdbcUrl = ${?DB_URL}
                username = ${?DB_USER}
                password = ${?DB_PASSWORD}
                maxActiveConnections = 5
                maxIdleTime = 600000 // milliseconds
                connectionCreateTimeout = 5000 // milliseconds
                connectionTestTimeout = 5000 // milliseconds
                queryTimeout = 300000 // milliseconds
            }
        }
        redis {
            host = ${?REDIS_HOST}
            port = ${?REDIS_PORT}
            #password = ${?REDIS_PASSWORD}
            rootKeyPrefix = "fanpoll-"${app.server.env}
            client {
                coroutines = 20
                #timout (Not Implemented)
                dispatcher {
                    fixedPoolSize = 3
                }
            }
            subscribe {
                patterns = ["__keyevent*__:expired"]
                channels = []
                keyspaceNotification {
                    processor {
                        coroutines = 3
                        dispatcher {
                            fixedPoolSize = 1
                        }
                    }
                }
            }
        }
        cache {
            caches = ["default"]
        }
        sessionAuth {
            storageType = "Redis" # Redis
            redisKeyExpiredNotification = true
            session {
                expireDuration = 1d
                extendDuration = 15m
            }
            logging {
                enabled = true
                destination = "Database" # File(default), Database
            }
        }
        openApi {
            info {
                env = ${app.server.env}
                gitTagVersion = "@gitTagVersion@"
                gitCommitVersion = "@gitCommitVersion@"
                buildTime = "@buildTime@"
                description = ""
            }
            swaggerUI {
                dir = "/home/ec2-user/swagger-ui"
                username = ${?SWAGGER_UI_AUTH_USER} #optional
                password = ${?SWAGGER_UI_AUTH_PASSWORD} #optional
            }
        }
        i18n {
            langs = ["zh-TW", "en"]
        }
        notification {
            channels {
                email {
                    mock = false
                    noReplyAddress = "configure it"
                    #marketingAddress = "configure it"
                    sendgrid {
                        apiKey = ${?SENDGRID_API_KEY}
                    }
                }
                push {
                    mock = false
                    fcm {
                        # https://github.com/firebase/firebase-admin-java/issues/317
                        # https://github.com/googleapis/google-auth-library-java/issues/356
                        # By default failing requests are retried up to 10 times with exponential backoff.
                        # connectTimeout = 60000
                        readTimeout = 180000
                        threadPool {
                            fixedPoolSize = 3
                        }
                    }
                }
                sms {
                    mock = true
                }
            }
            logging {
                enabled = true
                destination = "Database" # File(default), Database
                logSuccess = false
                logSuccessReqBody = false
                logSuccessRspBody = false
            }
            asyncExecutor {
                coroutineActor {
                    coroutines = 1
                    dispatcher {
                        fixedPoolSize = 1
                    }
                }
            }
        }
    }
}

ktor {
    deployment {
        port = ${PORT}
    }

    application {
        modules = [
            fanpoll.infra.ApplicationKt.main,
            fanpoll.ops.OpsProjectKt.opsMain,
            fanpoll.club.ClubProjectKt.clubMain
        ]
    }
}

app {
    server {
        project = "fanpoll"
        env = "@env@" # dev, test, prod
        instance = 1
        shutDownUrl = "/ops/server/shutdown"
    }
    infra {
        i18n {
            langs = ["zh-TW", "en"]
        }
        logging {
            request {
                enabled = true
                destination = "Database" # File(default), Database, AwsKinesis
                includeHeaders = false
                includeQueryString = true
                includeResponseBody = true
                includeGetMethod = true
                excludePaths = ["/ops/sysstat/healthCheck"]
                excludeRequestBodyPaths = ["/login", "/myPassword"]
            }
            error {
                enabled = true
                destination = "Database" # File(default), Database, AwsKinesis
            }
            writer {
                awsKinesis {
                    streamName = "logging"
                    nettyClient {
                        #maxConcurrency = 50 # => aws default value = 50
                        #maxPendingConnectionAcquires = 10000 => aws default value = 10000
                        #maxIdleConnectionTimeout = 60s => aws default value = 60s
                    }
                    threadPool {
                        fixedPoolSize = 1
                    }
                }
            }
            asyncExecutor {
                coroutineActor {
                    coroutines = 1
                    dispatcher {
                        fixedPoolSize = 1
                    }
                }
            }
        }
        auth {
            logging {
                enabled = true
                destination = "Database" # File(default), Database, AwsKinesis
            }
            session {
                expireDuration = 1d
                extendDuration = 15m
            }
            subscribeRedisSessionKeyExpired = true
        }
        openApi {
            info {
                env = ${app.server.env}
                gitTagVersion = "@gitTagVersion@"
                gitCommitVersion = "@gitCommitVersion@"
                buildTime = "@buildTime@"
                description = ""
            }
            swaggerUI {
                dir = ${APP_HOME}"/swagger-ui"
                username = ${?SWAGGER_UI_AUTH_USER} #optional
                password = ${?SWAGGER_UI_AUTH_PASSWORD} #optional
            }
        }
        database {
            hikari {
                driverClassName = "org.postgresql.Driver"
                jdbcUrl = ${?DB_URL} #"jdbc:postgresql://localhost:5432/fanpoll"
                username = ${?DB_USER}
                password = ${?DB_PASSWORD}
                minimumIdle = 2
                maximumPoolSize = 5
                idleTimeout = 600000
                connectionTimeout = 10000
            }
            flyway {
                baselineOnMigrate = true
                validateOnMigrate = true
            }
            asyncExecutor {
                coroutineActor {
                    coroutines = 1
                    dispatcher {
                        fixedPoolSize = 1
                    }
                }
            }
        }
        redis {
            host = ${?REDIS_HOST}
            port = ${?REDIS_PORT}
            #password = ${?REDIS_PASSWORD}
            rootKeyPrefix = "fanpoll-"${app.server.env}
            client {
                coroutines = 3
                dispatcher {
                    fixedPoolSize = 1
                }
            }
            subscribe {
                patterns = ["__keyevent*__:expired"]
                channels = []
                keyspaceNotification {
                    processor {
                        coroutines = 3
                        dispatcher {
                            fixedPoolSize = 1
                        }
                    }
                }
            }
        }
        cache {
            caches = ["default"]
        }
        notification {
            channels {
                email {
                    mock = false
                    noReplyAddress = "no-reply@fanpoll.club"
                    #marketingAddress = ""
                    awsSES {
                        nettyHttpClient {
                            http {
                                #maxConcurrency = 50 # => aws default value = 50
                                #maxPendingConnectionAcquires = 10000 => aws default value = 10000
                                #maxIdleConnectionTimeout = 60s => aws default value = 60s
                            }
                            threadPool {
                                fixedPoolSize = 1
                            }
                        }
                    }
                }
                push {
                    mock = false
                    fcm {
                        // https://github.com/firebase/firebase-admin-java/issues/317
                        // https://github.com/googleapis/google-auth-library-java/issues/356
                        // By default failing requests are retried up to 10 times with exponential backoff.
                        # connectTimeout = 60000
                        readTimeout = 180000
                        threadPool {
                            fixedPoolSize = 1
                        }
                    }
                }
                sms {
                    mock = true
                }
            }
            logging {
                enabled = true
                destination = "Database" # File(default), Database, AwsKinesis
                logSuccess = true
                logSuccessReqBody = true
                logSuccessRspBody = true
            }
            asyncExecutor {
                coroutineActor {
                    coroutines = 1
                    dispatcher {
                        fixedPoolSize = 1
                    }
                }
            }
        }
    }
}

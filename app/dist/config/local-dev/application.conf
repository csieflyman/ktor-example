ktor {
    // see io.ktor.server.engine.CommandLine.kt
    development = true

    deployment {
        port = ${PORT}
        watch = []
        connectionGroupSize = 1
        workerGroupSize = 1
        callGroupSize = 3
        shutdownGracePeriod = 2000
        shutdownTimeout = 3000
    }

    application {
        modules = [
            fanpoll.infra.ApplicationKt.main,
            fanpoll.ops.OpsProjectKt.opsMain,
            fanpoll.club.ClubProjectKt.clubMain
        ]
    }
}

app {
    info {
        project = "fanpoll"
        buildTime = "@buildTime@"
        git {
            semVer = "@gitSemVer@"
            branch = "@gitBranch@"
            commitId = "@gitCommitId@"
            abbrevCommitId = "@gitAbbrevCommitId@"
            tag = "@gitTag@"
            tagName = "@gitTagName@"
        }
    }
    server {
        env = "dev"
        instanceId = 1
        shutDownUrl = "/ops/server/shutdown/"${?SERVER_SHUTDOWN_KEY}
    }
    infra {
        logging {
            request {
                enabled = true
                destination = "Loki" # File(default), Database, Loki
                includeHeaders = false
                includeQueryString = true
                includeResponseBody = false
                includeGetMethod = true
                excludePaths = ["/ops/sysstat/healthCheck", "/apidocs"]
                excludeRequestBodyPaths = ["/login", "/myPassword"]
            }
            error {
                enabled = true
                destination = "Sentry" # File(default), Database, Sentry
            }
            asyncExecutor {
                coroutineActor {
                    coroutines = 1
                    dispatcher {
                        fixedPoolSize = 1
                    }
                }
            }
            writers {
                loki {
                    username = ${?LOKI_USERNAME}
                    password = ${?LOKI_PASSWORD}
                    pushUrl = "https://logs-prod3.grafana.net/loki/api/v1/push"
                    cio {
                        threadsCount = 1
                    }
                }
                sentry {
                    dsn = ${?SENTRY_DSN}
                    debug = true
                }
            }
        }
        database {
            hikari {
                driverClassName = "org.postgresql.Driver"
                jdbcUrl = ${DB_URL} #"jdbc:postgresql://localhost:5432/fanpoll"
                username = ${DB_USER}
                password = ${DB_PASSWORD}
                minimumIdle = 2
                maximumPoolSize = 5
                idleTimeout = 600000
                connectionTimeout = 10000
            }
            flyway {
                baselineOnMigrate = true
                validateOnMigrate = true
            }
            asyncExecutor {
                coroutineActor {
                    coroutines = 1
                    dispatcher {
                        fixedPoolSize = 1
                    }
                }
            }
            jasync {
                jdbcUrl = ${?DB_URL}
                username = ${?DB_USER}
                password = ${?DB_PASSWORD}
                maxActiveConnections = 2
                maxIdleTime = 600000 // milliseconds
                connectionCreateTimeout = 5000 // milliseconds
                connectionTestTimeout = 5000 // milliseconds
                queryTimeout = 300000 // milliseconds
            }
        }
        redis {
            host = ${REDIS_HOST}
            port = ${REDIS_PORT}
            #password = ${?REDIS_PASSWORD}
            rootKeyPrefix = "fanpoll-"${app.server.env}
            client {
                coroutines = 3
                dispatcher {
                    fixedPoolSize = 1
                }
            }
            subscribe {
                patterns = ["__keyevent*__:expired"]
                channels = []
                keyspaceNotification {
                    processor {
                        coroutines = 3
                        dispatcher {
                            fixedPoolSize = 1
                        }
                    }
                }
            }
        }
        cache {
            caches = ["default"]
        }
        sessionAuth {
            storageType = "Redis" # Redis
            redisKeyExpiredNotification = true
            session {
                expireDuration = 1d
                extendDuration = 15m
            }
            logging {
                enabled = true
                destination = "Loki" # File(default), Database, Loki
            }
        }
        openApi {
            info {
                description = ""
            }
            swaggerUI {
                dir = ${SWAGGER_UI_PATH}
                username = ${?SWAGGER_UI_AUTH_USER} #optional
                password = ${?SWAGGER_UI_AUTH_PASSWORD} #optional
            }
        }
        i18n {
            langs = ["zh-TW", "en"]
        }
        notification {
            channels {
                email {
                    mock = true
                    noReplyAddress = "configure it"
                    #marketingAddress = "configure it"
                    sendgrid {
                        apiKey = ${?SENDGRID_API_KEY}
                    }
                }
                push {
                    mock = true
                    fcm {
                        // https://github.com/firebase/firebase-admin-java/issues/317
                        // https://github.com/googleapis/google-auth-library-java/issues/356
                        // By default failing requests are retried up to 10 times with exponential backoff.
                        # connectTimeout = 60000
                        readTimeout = 180000
                        threadPool {
                            fixedPoolSize = 1
                        }
                    }
                }
                sms {
                    mock = true
                }
            }
            logging {
                enabled = true
                destination = "Loki" # File(default), Database, Loki
                logSuccess = true
                logSuccessReqBody = true
                logSuccessRspBody = true
            }
            asyncExecutor {
                coroutineActor {
                    coroutines = 1
                    dispatcher {
                        fixedPoolSize = 1
                    }
                }
            }
        }
    }
}

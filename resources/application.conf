ktor {
    // see io.ktor.server.engine.CommandLine.kt
    deployment {
        port = ${?APP_SERVER_PORT}
        // [Common Engine Configuration]
        // Size of the event group for accepting connections
        //connectionGroupSize = parallelism / 2 + 1
        // Size of the event group for processing connections,
        // parsing messages and doing engine's internal work
        //workerGroupSize = parallelism / 2 + 1
        // Size of the event group for running application code
        //callGroupSize = parallelism

        // [Netty Configuration] => see io.ktor.server.netty.NettyApplicationEngine
        // Size of the queue to store [ApplicationCall] instances that cannot be immediately processed
        //requestQueueLimit = 16
        // Do not create separate call event group and reuse worker group for processing calls
        //shareWorkGroup = false
        // Timeout in seconds for sending responses to client
        //responseWriteTimeoutSeconds = 10
    }

    application {
        modules = [fanpoll.ApplicationKt.module]
    }

    myapp {
        server {
            project = "ktor-example"
            # Dev, Stage, Prod
            env = ${?APP_SERVER_ENV}
            instance = 1
            # set Dispatchers.IO max threads by system property "kotlinx.coroutines.io.parallelism" (default: 64)
            shutDownUrl = "/ops/server/shutdown/"${?APP_SERVER_SHUTDOWN_KEY}
        }
        database {
            hikari {
                driverClassName = "org.postgresql.Driver"
                jdbcUrl = ${?APP_DB_URL} #"jdbc:postgresql://localhost:5432/ktor-example"
                username = ${?APP_DB_USER}
                password = ${?APP_DB_PASSWORD}
                minimumIdle = 10
                maximumPoolSize = 20
                idleTimeout = 600000
                connectionTimeout = 10000
            }
            flyway {
                baselineOnMigrate = true
            }
            coroutine {
                coroutines = 3
                dispatcher {
                    fixedPoolSize = 3
                }
            }
        }
        logging {
            requestLogEnabled = true
            errorLogEnabled = true
            storage = "Kinesis" #DB, Kinesis
            kinesis {
                commonStreamName = "common-resources"
                errorStreamName = "common-error"
                asyncHttpClient {
                    maxConcurrency = 10 # the same with coroutines
                    #maxPendingConnectionAcquires = 10000 => aws default value
                    #maxIdleConnectionTimeout = 60s => aws default value
                }
            }
            requestLog {
                includeResponseBody = true
                includeGetMethod = true
                excludePaths = ["/ops/sysstat/healthCheck"]
            }
            coroutine {
                coroutines = 10
                dispatcher {
                    fixedPoolSize = 1
                }
            }
        }
        redis {
            host = ${?APP_REDIS_HOST}
            port = ${?APP_REDIS_PORT}
            #password = ${?APP_REDIS_PASSWORD}
            rootKeyPrefix = "ktor-example-"${ktor.myapp.server.env}
            client {
                coroutines = 20
                #timout (Not Implemented)
                dispatcher {
                    fixedPoolSize = 3
                }
            }
            pubSub {
                patterns = ["__keyevent*__:expired"]
                keyspaceNotification {
                    subscribeSessionKeyExpired = true
                    coroutine {
                        coroutines = 3
                        #timout (Not Implemented)
                        dispatcher {
                            fixedPoolSize = 1
                        }
                    }
                }
            }
        }
        notification {
            channels {
                email {
                    logSuccess = false
                    noReplyAddress = "no-reply@fanpoll.club"
                    #marketingAddress = ""
                    #sendMeTooAddresses = []
                    ses {
                        asyncHttpClient {
                            maxConcurrency = 1
                            #maxPendingConnectionAcquires = 10000 => aws default value
                            #maxIdleConnectionTimeout = 60s => aws default value
                        }
                    }
                }
                push {
                    logSuccess = false
                    fcm {
                        // https://github.com/firebase/firebase-admin-java/issues/317
                        // https://github.com/googleapis/google-auth-library-java/issues/356
                        // By default failing requests are retried up to 10 times with exponential backoff.
                        # connectTimeout = 60000
                        readTimeout = 180000
                        executor {
                            fixedPoolSize = 1
                        }
                    }
                }
                coroutine {
                    coroutines = 10
                    dispatcher {
                        fixedPoolSize = 1
                    }
                }
            }
        }
        openApi {
            info {
                env = "@env@"
                gitTagVersion = "@gitTagVersion@"
                gitCommitVersion = "@gitCommitVersion@"
                buildTime = "@buildTime@"
                description = ""
            }
            swaggerUI {
                dir = "/home/ec2-user/swagger-ui"
                #username = ${?APP_SWAGGER_UI_AUTH_USER}
                #password = ${?APP_SWAGGER_UI_AUTH_PASSWORD}
            }
        }
        ops {
            auth {
                root {
                    id = "ops_root"
                    privateKey = ${?APP_OPS_AUTH_ROOT_PRIVATE_KEY}
                }
                opsTeam {
                    id = "ops_opsTeam"
                    privateKey = ${?APP_OPS_AUTH_OPSTEAM_PRIVATE_KEY}
                }
                appTeam {
                    id = "ops_appTeam"
                    privateKey = ${?APP_OPS_AUTH_APPTEAM_PRIVATE_KEY}
                }
            }
        }
        club {
            auth {
                //session {
                //    expireDuration = 1d
                //    extendDuration = 15m
                //}
                android {
                    id = "club_android"
                    publicKey = ${?APP_CLUB_AUTH_ANDROID_PUBLIC_KEY}
                    runAsKey = ${?APP_CLUB_AUTH_ANDROID_RUNAS_KEY}
                }
                iOS {
                    id = "club_iOS"
                    publicKey = ${?APP_CLUB_AUTH_IOS_PUBLIC_KEY}
                    runAsKey = ${?APP_CLUB_AUTH_IOS_RUNAS_KEY}
                }
            }
        }
    }
}
